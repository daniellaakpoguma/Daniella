import streamlit as st
from pymongo import MongoClient
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import make_pipeline
from sklearn.decomposition import TruncatedSVD
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
import nltk
nltk.download('stopwords')
nltk.download('punkt')

# MongoDB connection
client = MongoClient('mongodb://localhost:27017/')
db = client['social_media_data']

# Function to fetch comments from MongoDB
def fetch_comments(collection_name, limit=100, db=None):
    collection = db[collection_name]
    data = collection.find().limit(limit)
    comments = [comment['comment'] for comment in data]
    return comments

# Function for text preprocessing
def preprocess_text(text):
    stop_words = set(stopwords.words('english'))
    word_tokens = word_tokenize(text.lower())  # Tokenize and lowercase
    filtered_text = [word for word in word_tokens if word.isalnum() and word not in stop_words]  # Remove stopwords and non-alphanumeric tokens
    return ' '.join(filtered_text)

# Function to perform sentiment analysis using VADER
def analyze_sentiment(text):
    analyzer = SentimentIntensityAnalyzer()
    sentiment_scores = analyzer.polarity_scores(text)
    sentiment = 'positive' if sentiment_scores['compound'] >= 0.05 else 'negative' if sentiment_scores['compound'] <= -0.05 else 'neutral'
    return sentiment

# Fetch comments from MongoDB
comments = fetch_comments('Instagram_Comments', db=db)

# Clean and preprocess comments
cleaned_comments = [preprocess_text(comment) for comment in comments]

# Analyze sentiment for each comment
sentiments = [analyze_sentiment(comment) for comment in cleaned_comments]

# Combine comments, cleaned comments, and sentiments into a DataFrame
df_comments = pd.DataFrame({'comment': comments, 'cleaned_comment': cleaned_comments, 'sentiment': sentiments})

# Title of the application
st.title("User Sentiment Analysis with NLP")

st.write("VADER Sentiment Analysis: VADER (Valence Aware Dictionary and sEntiment Reasoner) tool is specifically designed for sentiment analysis of social media text. It categorizes each comment into positive, negative, or neutral sentiment based on the compound score generated by analyzing the sentiment intensity of the words in the comment.")
st.write ("Warning: Facebook Comment Data is not in english so everything comes out as neutral")

st.write("## Using Comments")
st.write("Analyze the sentiment of comments to categorize users into groups based on their sentiment towards the content or brand.")

# Display sentiment analysis results
st.subheader("Sentiment Analysis of Comments")
st.write(df_comments)

# Vectorize text data using TF-IDF
vectorizer = TfidfVectorizer(max_features=1000, max_df=0.95, min_df=2)
tfidf_matrix = vectorizer.fit_transform(df_comments['cleaned_comment'])

# Apply dimensionality reduction with TruncatedSVD
n_components = min(100, tfidf_matrix.shape[1])  # Limiting n_components to the number of features
svd = TruncatedSVD(n_components=n_components, random_state=42)
features = svd.fit_transform(tfidf_matrix)

# Standardize the data (important for K-means)
scaler = StandardScaler()
features_scaled = scaler.fit_transform(features)

# Apply K-means clustering
kmeans = KMeans(n_clusters=3, random_state=42)
df_comments['cluster'] = kmeans.fit_predict(features_scaled)

# Display cluster analysis
st.subheader("Cluster Analysis")
st.write("Placeholder for cluster analysis visualization")

# Optional: Visualize insights (e.g., sentiment distribution, cluster characteristics)
st.subheader("Visualize Insights")
# Example: Display sentiment distribution
sentiment_counts = df_comments['sentiment'].value_counts()
st.bar_chart(sentiment_counts)

# Example: Display cluster characteristics
cluster_analysis = df_comments.groupby('cluster').agg({
    'sentiment': lambda x: x.value_counts().index[0] if len(x.value_counts()) > 0 else 'unknown',
    'comment': 'count'
}).reset_index()
st.write("Cluster Characteristics:")
st.write(cluster_analysis)

